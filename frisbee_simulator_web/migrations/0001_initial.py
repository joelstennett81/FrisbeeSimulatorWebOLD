# Generated by Django 4.2.7 on 2023-12-02 06:15

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('game_type', models.CharField(choices=[('Pool Play', 'Pool Play'), ('Pre-Quarterfinal', 'Pre-Quarterfinal'), ('Quarterfinal', 'Quarterfinal'), ('Loser-Semifinal', 'Loser-Semifinal'), ('Semifinal', 'Semifinal'), ('Championship', 'Championship'), ('Third-Place-Final', 'Third-Place-Final'), ('Fifth-Place-Final', 'Fifth-Place-Final'), ('Seventh-Place-Final', 'Seventh-Place-Final')], max_length=50)),
                ('winner_score', models.PositiveIntegerField(default=0)),
                ('loser_score', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('jersey_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)])),
                ('height', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(48), django.core.validators.MaxValueValidator(90)])),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(450)])),
                ('speed', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('jumping', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flick_distance', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('flick_accuracy', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('backhand_accuracy', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('backhand_distance', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cutter_defense', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('handler_defense', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('agility', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('handle_cuts', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('under_cuts', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('deep_cuts', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('throw_ability', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cut_ability', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('overall_rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_type', models.CharField(choices=[('College Fall', 'College Fall'), ('College Spring', 'College Spring'), ('Club', 'Club'), ('AUDL', 'AUDL'), ('PUL', 'PUL')], max_length=50)),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(2100)])),
                ('players', models.ManyToManyField(related_name='players_seasons', to='frisbee_simulator_web.player')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=50)),
                ('mascot', models.CharField(max_length=50)),
                ('overall_rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('bench_players', models.ManyToManyField(related_name='bench_players_teams', to='frisbee_simulator_web.player')),
                ('d_line_players', models.ManyToManyField(related_name='d_line_players_teams', to='frisbee_simulator_web.player')),
                ('o_line_players', models.ManyToManyField(related_name='o_line_players_teams', to='frisbee_simulator_web.player')),
                ('players', models.ManyToManyField(related_name='players_teams', to='frisbee_simulator_web.player')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('location', models.CharField(max_length=50)),
                ('number_of_teams', models.PositiveIntegerField(choices=[(4, '4'), (8, '8'), (16, '16'), (20, '20'), (32, '32')], default=4)),
                ('is_complete', models.BooleanField(default=False)),
                ('champion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.team')),
                ('teams', models.ManyToManyField(related_name='teams_tournaments', to='frisbee_simulator_web.team')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentBracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_teams', models.PositiveIntegerField(choices=[(4, '4'), (8, '8'), (12, '12')], default=4)),
                ('bracket_type', models.CharField(choices=[('Championship', 'Championship'), ('Loser', 'Loser')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_teams', models.PositiveIntegerField(choices=[(4, '4'), (5, '5')], default=4)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool_play_seed', models.PositiveIntegerField()),
                ('bracket_play_seed', models.PositiveIntegerField(blank=True)),
                ('pool_play_wins', models.PositiveIntegerField(default=0)),
                ('pool_play_losses', models.PositiveIntegerField(default=0)),
                ('pool_play_point_differential', models.IntegerField(default=0)),
                ('bracket_play_wins', models.PositiveIntegerField(default=0)),
                ('bracket_play_losses', models.PositiveIntegerField(default=0)),
                ('bracket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournamentbracket')),
                ('pool', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournamentpool')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournament')),
            ],
        ),
        migrations.AddField(
            model_name='tournamentpool',
            name='teams',
            field=models.ManyToManyField(related_name='teams_pools', to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='tournamentpool',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournament'),
        ),
        migrations.AddField(
            model_name='tournamentbracket',
            name='champion',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='tournamentbracket',
            name='teams',
            field=models.ManyToManyField(related_name='teams_brackets', to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='tournamentbracket',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='frisbee_simulator_web.tournament'),
        ),
        migrations.CreateModel(
            name='TeamTournamentStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('goals_for', models.PositiveIntegerField(default=0)),
                ('goals_against', models.PositiveIntegerField(default=0)),
                ('passing_yards_for', models.PositiveIntegerField(default=0)),
                ('passing_yards_against', models.PositiveIntegerField(default=0)),
                ('throwaways', models.PositiveIntegerField(default=0)),
                ('drops', models.PositiveIntegerField(default=0)),
                ('turnovers_forced', models.PositiveIntegerField(default=0)),
                ('passes_thrown', models.PositiveIntegerField(default=0)),
                ('passes_completed', models.PositiveIntegerField(default=0)),
                ('hucks_thrown', models.PositiveIntegerField(default=0)),
                ('hucks_completed', models.PositiveIntegerField(default=0)),
                ('callahans', models.PositiveIntegerField(default=0)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_stats', to='frisbee_simulator_web.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='frisbee_simulator_web.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TeamSeasonStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveIntegerField()),
                ('losses', models.PositiveIntegerField()),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_season_stats', to='frisbee_simulator_web.season')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_stats', to='frisbee_simulator_web.team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamGameStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals_scored', models.PositiveIntegerField(default=0)),
                ('goals_against', models.PositiveIntegerField(default=0)),
                ('passes_thrown', models.PositiveIntegerField(default=0)),
                ('passes_completed', models.PositiveIntegerField(default=0)),
                ('hucks_thrown', models.PositiveIntegerField(default=0)),
                ('hucks_completed', models.PositiveIntegerField(default=0)),
                ('total_throwing_yards', models.PositiveIntegerField(default=0)),
                ('total_receiving_yards', models.PositiveIntegerField(default=0)),
                ('turnovers', models.PositiveIntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_stats', to='frisbee_simulator_web.game')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='frisbee_simulator_web.team')),
            ],
        ),
        migrations.AddField(
            model_name='season',
            name='teams',
            field=models.ManyToManyField(related_name='teams_seasons', to='frisbee_simulator_web.team'),
        ),
        migrations.CreateModel(
            name='PlayerTournamentStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('passes_thrown', models.PositiveIntegerField(default=0)),
                ('passes_completed', models.PositiveIntegerField(default=0)),
                ('hucks_thrown', models.PositiveIntegerField(default=0)),
                ('hucks_completed', models.PositiveIntegerField(default=0)),
                ('throwing_yards', models.PositiveIntegerField(default=0)),
                ('receiving_yards', models.PositiveIntegerField(default=0)),
                ('turnovers_forced', models.PositiveIntegerField(default=0)),
                ('throwaways', models.PositiveIntegerField(default=0)),
                ('drops', models.PositiveIntegerField(default=0)),
                ('callahans', models.PositiveIntegerField(default=0)),
                ('pulls', models.PositiveIntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_stats', to='frisbee_simulator_web.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='frisbee_simulator_web.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSeasonStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='season_stats', to='frisbee_simulator_web.player')),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='frisbee_simulator_web.season')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerGameStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('passes_thrown', models.PositiveIntegerField(default=0)),
                ('passes_completed', models.PositiveIntegerField(default=0)),
                ('hucks_thrown', models.PositiveIntegerField(default=0)),
                ('hucks_completed', models.PositiveIntegerField(default=0)),
                ('throwing_yards', models.PositiveIntegerField(default=0)),
                ('receiving_yards', models.PositiveIntegerField(default=0)),
                ('turnovers_forced', models.PositiveIntegerField(default=0)),
                ('throwaways', models.PositiveIntegerField(default=0)),
                ('drops', models.PositiveIntegerField(default=0)),
                ('callahans', models.PositiveIntegerField(default=0)),
                ('pulls', models.PositiveIntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='frisbee_simulator_web.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='frisbee_simulator_web.player')),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='seasons',
            field=models.ManyToManyField(related_name='seasons_players', to='frisbee_simulator_web.season'),
        ),
        migrations.AddField(
            model_name='player',
            name='teams',
            field=models.ManyToManyField(related_name='teams_players', to='frisbee_simulator_web.team'),
        ),
        migrations.AddField(
            model_name='game',
            name='loser',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loser_games', to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='game',
            name='team_one',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_one_games', to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='game',
            name='team_two',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_two_games', to='frisbee_simulator_web.tournamentteam'),
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='frisbee_simulator_web.tournament'),
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner_games', to='frisbee_simulator_web.tournamentteam'),
        ),
    ]
